#!/usr/bin/env bash

# set -x

info() {
  printf "\e[1;36m$*\e[m\n"
}

pass() {
  printf "\e[1;32m$*\e[m\n"
}

warning() {
  printf "\e[1;33m$*\e[m\n"
}

error() {
  printf "\e[1;31m$*\e[m\n"
}

pass_right() {
  msg="$1"
  tot=$WIDTH
  len=$(echo -n "$msg" | wc -m)
  half=$(echo "($tot - $len - 8)" | bc)
  printf '\e[1;32m%*s' "$half"
  printf "$msg\e[m\n"
}

error_right() {
  msg="$1"
  tot=$WIDTH
  len=$(echo -n "$msg" | wc -m)
  half=$(echo "($tot - $len - 8)" | bc)
  printf '\e[1;31m%*s' "$half"
  printf "$msg\e[m\n"
}

error_wln() {
  printf "\e[1;31m$*\e[m"
}

print_split() {
  ch=$1
  msg=" $2 "
  tot=$WIDTH
  len=$(echo -n "$msg" | wc -m)
  half=$(echo "($tot - $len) / 2" | bc)
  printf '%*s' "$half" | tr ' ' "$ch"
  printf "$msg"
  printf '%*s\n' "$half" | tr ' ' "$ch"
}

full_line() {
  ch=$1
  tot=$WIDTH
  printf '\e[1;33m%*s\e[m\n' "$tot" | tr ' ' "$ch"
}

full_error_line() {
  ch=$1
  tot=$WIDTH
  printf '\e[1;31m%*s\e[m\n' "$tot" | tr ' ' "$ch"
}

error_split() {
  ch=$1
  msg=" $2 "
  tot=$WIDTH
  len=$(echo -n "$msg" | wc -m)
  half=$(echo "($tot - $len) / 2" | bc)
  printf '\e[1;31m%*s' "$half" | tr ' ' "$ch"
  printf "$msg"
  printf '%*s\e[m\n' "$half" | tr ' ' "$ch"
}

print_color() {
  ch=$1
  msg=" $2 "
  tot=$WIDTH
  len=$(echo -n "$msg" | wc -m)
  half=$(echo "($tot - $len) / 2" | bc)
  printf '\e[1;36m%*s' "$half" | tr ' ' "$ch"
  printf "$msg"
  printf '%*s\e[m\n' "$half" | tr ' ' "$ch"
}

print_stdout() {
  if [[ ! -f "$1" ]]; then return 0; fi
  if [[ -z "$2" ]]; then
    cat $1
  else
    sed -n '1,20p' $1 | while read line; do
      local c=$(echo $line | wc -c)
      if [[ c -ge 1000 ]]; then
        line="$(echo $line | head -c 1000)......(too long ignored)......"
      fi
      echo $line
    done
    local d=$(cat $1 | wc -l)
    if [[ d -ge 20 ]]; then
      echo ".....(too long ignored)......"
    fi
  fi
}

print_compare_diff() {
  local inp=$1
  local out="${inp%.inp}".out
  local rel="${inp%.inp}".cmp
  echo "Input: "
  print_stdout "$i"
  print_banner "diff"
  diff -y -W 60 "$out" "$rel" || true
  out="$rel"
  mv "$out" "$out".cmp.bak
  mv "$inp" "$inp".cmp.bak
  # TODO(zq7): maybe save sample tests here.
  rm -f *.rel *.inp *.out *.cmp *.gv
  cp "$out".cmp.bak 0.rel
  cp "$inp".cmp.bak 0.inp
  cp "$inp".cmp.bak $(basename $PWD).in
  rm -f *.bak
}

timeout="timeout"
if [[ `uname` == Darwin ]]; then timeout="gtimeout"; fi

TIME_LIMITS=5

trap_ctrlc () {
  if [[ -f std_err ]]; then
    print_stdout std_err
  fi
  rm -f std_err
  error "Timeout after runnig for ($TIME_LIMITS)s, loop might exist."
  exit 1
}

# Get the terminal width
WIDTH=$(tput cols)
